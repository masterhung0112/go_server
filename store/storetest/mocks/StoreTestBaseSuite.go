// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `npm run task store_mocks`.

package mocks

import (
	store "github.com/masterhung0112/hk_server/store"
	sqlstore "github.com/masterhung0112/hk_server/store/sqlstore"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// StoreTestBaseSuite is an autogenerated mock type for the StoreTestBaseSuite type
type StoreTestBaseSuite struct {
	mock.Mock
}

// SetSqlStore provides a mock function with given fields: sqlStore
func (_m *StoreTestBaseSuite) SetSqlStore(sqlStore *sqlstore.SqlStore) {
	_m.Called(sqlStore)
}

// SetStore provides a mock function with given fields: _a0
func (_m *StoreTestBaseSuite) SetStore(_a0 store.Store) {
	_m.Called(_a0)
}

// SetT provides a mock function with given fields: _a0
func (_m *StoreTestBaseSuite) SetT(_a0 *testing.T) {
	_m.Called(_a0)
}

// SqlStore provides a mock function with given fields:
func (_m *StoreTestBaseSuite) SqlStore() *sqlstore.SqlStore {
	ret := _m.Called()

	var r0 *sqlstore.SqlStore
	if rf, ok := ret.Get(0).(func() *sqlstore.SqlStore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlstore.SqlStore)
		}
	}

	return r0
}

// Store provides a mock function with given fields:
func (_m *StoreTestBaseSuite) Store() store.Store {
	ret := _m.Called()

	var r0 store.Store
	if rf, ok := ret.Get(0).(func() store.Store); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(store.Store)
		}
	}

	return r0
}

// T provides a mock function with given fields:
func (_m *StoreTestBaseSuite) T() *testing.T {
	ret := _m.Called()

	var r0 *testing.T
	if rf, ok := ret.Get(0).(func() *testing.T); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*testing.T)
		}
	}

	return r0
}
